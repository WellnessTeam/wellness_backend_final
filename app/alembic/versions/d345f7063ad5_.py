"""empty message

Revision ID: d345f7063ad5
Revises: 
Create Date: 2024-09-27 12:01:45.924843

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd345f7063ad5'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('food_class_final')
    op.alter_column('auth', 'access_created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('auth', 'access_expired_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('auth', 'refresh_created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('auth', 'refresh_expired_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.create_unique_constraint(None, 'auth', ['access_token'])
    op.alter_column('food_list', 'category_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('food_list', 'food_name',
               existing_type=sa.VARCHAR(length=15),
               nullable=False)
    op.alter_column('food_list', 'category_name',
               existing_type=sa.VARCHAR(length=10),
               nullable=False)
    op.alter_column('food_list', 'food_kcal',
               existing_type=sa.NUMERIC(precision=6, scale=2),
               nullable=False)
    op.alter_column('food_list', 'food_car',
               existing_type=sa.NUMERIC(precision=6, scale=2),
               nullable=False)
    op.alter_column('food_list', 'food_prot',
               existing_type=sa.NUMERIC(precision=6, scale=2),
               nullable=False)
    op.alter_column('food_list', 'food_fat',
               existing_type=sa.NUMERIC(precision=6, scale=2),
               nullable=False)
    op.alter_column('history', 'id',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('history', 'date',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_foreign_key(None, 'history', 'food_list', ['category_id'], ['id'])
    op.alter_column('logs', 'msg',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('logs', 'time_stamp',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               nullable=True)
    op.create_index(op.f('ix_logs_id'), 'logs', ['id'], unique=False)
    op.drop_index('ix_recommend_id', table_name='recommend')
    op.alter_column('user_info', 'height',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.DECIMAL(precision=4, scale=1),
               existing_nullable=False)
    op.alter_column('user_info', 'weight',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.DECIMAL(precision=4, scale=1),
               existing_nullable=False)
    op.alter_column('user_info', 'birthday',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DATE(),
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('user_info', 'birthday',
               existing_type=sa.DATE(),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('user_info', 'weight',
               existing_type=sa.DECIMAL(precision=4, scale=1),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=False)
    op.alter_column('user_info', 'height',
               existing_type=sa.DECIMAL(precision=4, scale=1),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=False)
    op.create_index('ix_recommend_id', 'recommend', ['id'], unique=False)
    op.drop_index(op.f('ix_logs_id'), table_name='logs')
    op.alter_column('logs', 'time_stamp',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('logs', 'msg',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.drop_constraint(None, 'history', type_='foreignkey')
    op.alter_column('history', 'date',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('history', 'id',
               existing_type=sa.INTEGER(),
               server_default=sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('food_list', 'food_fat',
               existing_type=sa.NUMERIC(precision=6, scale=2),
               nullable=True)
    op.alter_column('food_list', 'food_prot',
               existing_type=sa.NUMERIC(precision=6, scale=2),
               nullable=True)
    op.alter_column('food_list', 'food_car',
               existing_type=sa.NUMERIC(precision=6, scale=2),
               nullable=True)
    op.alter_column('food_list', 'food_kcal',
               existing_type=sa.NUMERIC(precision=6, scale=2),
               nullable=True)
    op.alter_column('food_list', 'category_name',
               existing_type=sa.VARCHAR(length=10),
               nullable=True)
    op.alter_column('food_list', 'food_name',
               existing_type=sa.VARCHAR(length=15),
               nullable=True)
    op.alter_column('food_list', 'category_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_constraint(None, 'auth', type_='unique')
    op.alter_column('auth', 'refresh_expired_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('auth', 'refresh_created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('auth', 'access_expired_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('auth', 'access_created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.create_table('food_class_final',
    sa.Column('번호', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('카테고리', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('음 식 명', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('중량(g)', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('에너지(kcal)', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('탄수화물(g)', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('당류(g)', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('지방(g)', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('단백질(g)', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('칼슘(mg)', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('인(mg)', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('나트륨(mg)', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('칼륨(mg)', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('마그네슘(mg)', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('철(mg)', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('아연(mg)', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('콜레스테롤(mg)', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id', name='food_class_final_pkey')
    )
    # ### end Alembic commands ###
